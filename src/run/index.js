import colors from "colors";
import delayHelper from "../helpers/delay.js";
import authService from "../services/auth.js";
import dailyService from "../services/view.js";
import farmingClass from "../services/farming.js";
import gameService from "../services/game.js";
import inviteClass from "../services/invite.js";
import taskService from "../services/task.js";
import tribeService from "../services/tribe.js";
import userService from "../services/user.js";

// ƒêi·ªÅu ch·ªânh kho·∫£ng c√°ch th·ªùi gian ch·∫°y v√≤ng l·∫∑p ƒë·∫ßu ti√™n gi·ªØa 2 t√†i kho·∫£n tr√°nh b·ªã spam request (t√≠nh b·∫±ng gi√¢y)
const DELAY_ACC = 30;

const run = async (user) => {
  await delayHelper.delay((user.index - 1) * DELAY_ACC);
  let isDoneAccount = false;
  while (!isDoneAccount) {
    // Ki·ªÉm tra k·∫øt n·ªëi proxy
    let isProxyConnected = false;
    while (!isProxyConnected) {
      const ip = await user.http.checkProxyIP();
      if (ip === -1) {
        user.log.logError(
          "Proxy l·ªói, ki·ªÉm tra l·∫°i k·∫øt n·ªëi proxy, s·∫Ω th·ª≠ k·∫øt n·ªëi l·∫°i sau 30s"
        );
        await delayHelper.delay(30);
      } else {
        isProxyConnected = true;
      }
    }

    // ƒêƒÉng nh·∫≠p t√†i kho·∫£n
    const login = await authService.handleLogin(user);

    if (!login) {
      await delayHelper.delay(60);
      continue;
    }

    // await taskService.handleTask(user);
    await gameService.handleGame(user);
    await delayHelper.delay(30);
  }
};

console.log(
  colors.yellow.bold(
    `=============  Tool ph√°t tri·ªÉn v√† chia s·∫ª mi·ªÖn ph√≠ b·ªüi ZuyDD  =============`
  )
);
console.log(
  "M·ªçi h√†nh vi bu√¥n b√°n tool d∆∞·ªõi b·∫•t c·ª© h√¨nh th·ª©c n√†o ƒë·ªÅu kh√¥ng ƒë∆∞·ª£c cho ph√©p!"
);
console.log(
  `Telegram: ${colors.green(
    "https://t.me/zuydd"
  )}  ___  Facebook: ${colors.blue("https://www.facebook.com/zuy.dd")}`
);
console.log(
  `üöÄ C·∫≠p nh·∫≠t c√°c tool m·ªõi nh·∫•t t·∫°i: üëâ ${colors.gray(
    "https://github.com/zuydd"
  )} üëà`
);
console.log("");
console.log("");
console.log("");
const users = await userService.loadUser();

for (const [index, user] of users.entries()) {
  run(user);
}
